import React, {
  createContext,
  FC,
  useContext,
  useEffect,
  useMemo,
} from 'react';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import formatDistanceToNow from 'date-fns/formatDistanceToNow';
import lightFormat from 'date-fns/lightFormat';

import { useRewardsVaultState } from '../../../../context/DataProvider/DataProvider';
import { RewardsVaultState } from '../../../../context/DataProvider/types';
import { TransactionForm } from '../../../forms/TransactionForm';
import {
  FormProvider,
  useSetFormManifest,
} from '../../../forms/TransactionForm/FormProvider';
import { useSignerContext } from '../../../../context/SignerProvider';
import { RewardsVaultFactory } from '../../../../typechain/RewardsVaultFactory';
import { Interfaces, SendTxManifest } from '../../../../types';
import { humanizeList } from '../../../../web3/strings';
import { RewardsVault } from '../../../../typechain/RewardsVault';
import { Table, TableProps } from '../../../core/Table';

enum Columns {
  Period,
  Balance,
  Status,
  Vesting,
}

const COLUMNS: TableProps<Columns>['columns'] = [
  {
    key: Columns.Period,
    title: 'Period',
  },
  {
    key: Columns.Balance,
    title: 'Balance',
    numeric: true,
  },
  {
    key: Columns.Status,
    title: 'Status',
  },
  {
    key: Columns.Vesting,
    title: 'Vesting',
  },
];

const NOW = new Date();

const Container = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  overflow-x: auto;
`;

interface State {
  contract?: RewardsVault;
  rewardsVault?: RewardsVaultState;
  periodsAvailableToVest: number[];
}

const vaultCtx = createContext<State>({ periodsAvailableToVest: [] });

const VaultProvider: FC<{}> = ({ children }) => {
  const rewardsVault = useRewardsVaultState();
  const periods = rewardsVault?.periods;

  const periodsAvailableToVest = useMemo<number[]>(
    () =>
      (periods || [])
        .filter(
          ({ end, vaultBalance: { amount, vested } }) =>
            end < NOW && amount.exact.gt(0) && !vested,
        )
        .map(({ period }) => period),
    [periods],
  );

  const signer = useSignerContext();

  const rewardsVaultAddress = rewardsVault?.address;

  const contract = useMemo(
    () =>
      signer && rewardsVaultAddress
        ? RewardsVaultFactory.connect(rewardsVaultAddress, signer)
        : undefined,
    [signer, rewardsVaultAddress],
  );

  return (
    <FormProvider formId="vault">
      <vaultCtx.Provider
        value={useMemo(
          () => ({ contract, periodsAvailableToVest, rewardsVault }),
          [contract, periodsAvailableToVest, rewardsVault],
        )}
      >
        {children}
      </vaultCtx.Provider>
    </FormProvider>
  );
};

const VaultTable: FC<{}> = () => {
  const { rewardsVault } = useContext(vaultCtx);
  const periods = rewardsVault?.periods;

  const items = useMemo<TableProps<Columns>['items']>(
    () =>
      periods
        ? periods.map(
            ({
              vaultBalance: { amount, vested },
              current,
              end,
              period,
              start,
            }) => ({
              id: period.toString(),
              data: {
                [Columns.Period]: `${period}: (${lightFormat(
                  start,
                  'dd.MM.yy',
                )})`,
                [Columns.Balance]: `${amount.format()}`,
                [Columns.Status]: current
                  ? `Unlocks in ${formatDistanceToNow(end)}`
                  : end < NOW
                  ? 'Unlocked'
                  : '-',
                [Columns.Vesting]:
                  end < NOW && amount.exact.gt(0)
                    ? vested
                      ? 'Vested'
                      : 'Not vested'
                    : '-',
              },
            }),
          )
        : [],
    [periods],
  );

  return <Table items={items} columns={COLUMNS} />;
};

const Vault: FC<{}> = ({ children }) => {
  const { rewardsVault, periodsAvailableToVest, contract } = useContext(
    vaultCtx,
  );
  const setFormManifest = useSetFormManifest();

  const valid = periodsAvailableToVest.length > 0;
  useEffect(() => {
    if (valid && contract) {
      const manifest: SendTxManifest<Interfaces.RewardsVault, 'vestRewards'> = {
        fn: 'vestRewards',
        args: [periodsAvailableToVest],
        iface: contract,
      };
      setFormManifest(manifest);
    } else {
      setFormManifest(null);
    }
  }, [contract, valid, periodsAvailableToVest, setFormManifest]);

  return (
    <Container>
      {rewardsVault ? (
        <TransactionForm
          confirmLabel={
            periodsAvailableToVest.length > 0
              ? `Vest period${
                  periodsAvailableToVest.length > 1 ? 's' : ''
                } ${humanizeList(
                  periodsAvailableToVest.map(p => p.toString()),
                )}`
              : 'No periods available to vest'
          }
          input={children}
          transactionsLabel="Vesting transactions"
          valid={valid}
        />
      ) : (
        <Skeleton height={500} />
      )}
    </Container>
  );
};

export const VaultPage: FC<{}> = () => (
  <VaultProvider>
    <Vault>
      <VaultTable />
    </Vault>
  </VaultProvider>
);
