# import './fragments.graphql'

query CoreTokens @api(name: protocol) {
  mUSD: tokens(where: { symbol: "mUSD" }) {
    ...TokenDetails
  }
  #    mta: tokens(where: { symbol: "MTA" }) {
  #        ...TokenDetails
  #    }
  #    mGLD: tokens(where: { symbol: "mGLD" }) {
  #        ...TokenDetails
  #    }
  mUSDSavings: savingsContracts(first: 1) {
    id
  }
}

query Masset($id: ID!) @api(name: protocol) {
  masset(id: $id) {
    ...MassetAll
  }
}

query Erc20Tokens($addresses: [Bytes!]!) @api(name: protocol) {
  tokens(where: { address_in: $addresses }) {
    ...TokenDetails
  }
}

query AllErc20Tokens @api(name: protocol) {
  savingsContracts {
    address: id
    id
  }
  tokens {
    ...TokenDetails
  }
}

fragment ER on ExchangeRate {
  rate
  timestamp
}

query LastExchangeRateBeforeTimestamp($timestamp: Int!) @api(name: protocol) {
  exchangeRates(
    where: { timestamp_lt: $timestamp }
    orderDirection: desc
    orderBy: timestamp
    first: 1
  ) {
    ...ER
  }
}

query WeeklyExchangeRates(
  $day0: Int!
  $day1: Int!
  $day2: Int!
  $day3: Int!
  $day4: Int!
  $day5: Int!
  $day6: Int!
) @api(name: protocol) {
  day0: exchangeRates(
    where: { timestamp_lt: $day0 }
    orderDirection: desc
    orderBy: timestamp
    first: 1
  ) {
    ...ER
  }
  day1: exchangeRates(
    where: { timestamp_lt: $day1 }
    orderDirection: desc
    orderBy: timestamp
    first: 1
  ) {
    ...ER
  }
  day2: exchangeRates(
    where: { timestamp_lt: $day2 }
    orderDirection: desc
    orderBy: timestamp
    first: 1
  ) {
    ...ER
  }
  day3: exchangeRates(
    where: { timestamp_lt: $day3 }
    orderDirection: desc
    orderBy: timestamp
    first: 1
  ) {
    ...ER
  }
  day4: exchangeRates(
    where: { timestamp_lt: $day4 }
    orderDirection: desc
    orderBy: timestamp
    first: 1
  ) {
    ...ER
  }
  day5: exchangeRates(
    where: { timestamp_lt: $day5 }
    orderDirection: desc
    orderBy: timestamp
    first: 1
  ) {
    ...ER
  }
  day6: exchangeRates(
    where: { timestamp_lt: $day6 }
    orderDirection: desc
    orderBy: timestamp
    first: 1
  ) {
    ...ER
  }
}

query SavingsContract($id: ID!) @api(name: protocol) {
  savingsContracts(where: { id: $id }) {
    id
    totalSavings {
      ...MetricFields
    }
    totalCredits {
      ...MetricFields
    }
    exchangeRates {
      id
    }
    dailyAPY
    automationEnabled
  }
}

query Token($id: ID!) @api(name: protocol) {
  token(id: $id) {
    ...TokenDetails
  }
}

query CreditBalances($account: ID!) @api(name: protocol) {
  account(id: $account) {
    creditBalance {
      amount
    }
  }
}

query LatestExchangeRate @api(name: protocol) {
  exchangeRates(first: 1, orderDirection: desc, orderBy: timestamp) {
    ...ER
  }
}

query ScriptVaultBalances($block: Block_height) @api(name: protocol) {
  bassets(block: $block) {
    id
    token {
      symbol
      decimals
    }
    vaultBalance {
      ...MetricFields
    }
  }
}

query ScriptFees($limit: Int!, $offset: Int!) @api(name: protocol) {
  paidFeeTransactions(first: $limit, skip: $offset) {
    massetUnits
  }
}

query HistoricTransactions($account: Bytes) @api(name: protocol) {
  transactions(where: { sender: $account }, orderBy: timestamp) {
    id
    hash
    block
    timestamp
    sender
    __typename
    ... on RedeemTransaction {
      masset {
        id
      }
      massetUnits
      bassets {
        id
      }
      bassetsUnits
      recipient
    }
    ... on RedeemMassetTransaction {
      masset {
        id
      }
      massetUnits
      recipient
    }
    ... on MintMultiTransaction {
      masset {
        id
      }
      massetUnits
      bassets {
        id
      }
      bassetsUnits
    }
    ... on MintSingleTransaction {
      bassetUnits
      masset {
        id
      }
      basset {
        id
      }
      massetUnits
    }
    ... on PaidFeeTransaction {
      basset {
        id
      }
      bassetUnits
      masset {
        id
      }
      massetUnits
    }
    ... on SavingsContractDepositTransaction {
      amount
      savingsContract {
        id
      }
    }
    ... on SavingsContractWithdrawTransaction {
      amount
      savingsContract {
        id
      }
    }
    ... on SwapTransaction {
      masset {
        id
      }
      inputBasset {
        id
      }
      outputBasset {
        id
      }
      massetUnits
    }
  }
}
