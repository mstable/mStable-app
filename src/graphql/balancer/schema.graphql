schema {
  query: Query
  subscription: Subscription
}
type Query {
  balancer(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Balancer
  balancers(
    skip: Int = 0
    first: Int = 100
    orderBy: Balancer_orderBy
    orderDirection: OrderDirection
    where: Balancer_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Balancer!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Pool!]!
  poolToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): PoolToken
  poolTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolToken_orderBy
    orderDirection: OrderDirection
    where: PoolToken_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [PoolToken!]!
  poolShare(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): PoolShare
  poolShares(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolShare_orderBy
    orderDirection: OrderDirection
    where: PoolShare_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [PoolShare!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [User!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Swap!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Transaction!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [TokenPrice!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}
input Block_height {
  hash: Bytes
  number: Int
}
scalar Bytes
type Balancer {
  id: ID!
  color: String!
  poolCount: Int!
  finalizedPoolCount: Int!
  crpCount: Int!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]
  txCount: BigInt!
  totalLiquidity: BigDecimal!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
}
enum Pool_orderBy {
  id
  controller
  publicSwap
  finalized
  crp
  crpController
  symbol
  name
  rights
  cap
  active
  swapFee
  totalWeight
  totalShares
  totalSwapVolume
  totalSwapFee
  liquidity
  tokensList
  tokens
  shares
  createTime
  tokensCount
  holdersCount
  joinsCount
  exitsCount
  swapsCount
  factoryID
  tx
  swaps
}
enum OrderDirection {
  asc
  desc
}
input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  controller: Bytes
  controller_not: Bytes
  controller_in: [Bytes!]
  controller_not_in: [Bytes!]
  controller_contains: Bytes
  controller_not_contains: Bytes
  publicSwap: Boolean
  publicSwap_not: Boolean
  publicSwap_in: [Boolean!]
  publicSwap_not_in: [Boolean!]
  finalized: Boolean
  finalized_not: Boolean
  finalized_in: [Boolean!]
  finalized_not_in: [Boolean!]
  crp: Boolean
  crp_not: Boolean
  crp_in: [Boolean!]
  crp_not_in: [Boolean!]
  crpController: Bytes
  crpController_not: Bytes
  crpController_in: [Bytes!]
  crpController_not_in: [Bytes!]
  crpController_contains: Bytes
  crpController_not_contains: Bytes
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rights: [String!]
  rights_not: [String!]
  rights_contains: [String!]
  rights_not_contains: [String!]
  cap: BigInt
  cap_not: BigInt
  cap_gt: BigInt
  cap_lt: BigInt
  cap_gte: BigInt
  cap_lte: BigInt
  cap_in: [BigInt!]
  cap_not_in: [BigInt!]
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  swapFee: BigDecimal
  swapFee_not: BigDecimal
  swapFee_gt: BigDecimal
  swapFee_lt: BigDecimal
  swapFee_gte: BigDecimal
  swapFee_lte: BigDecimal
  swapFee_in: [BigDecimal!]
  swapFee_not_in: [BigDecimal!]
  totalWeight: BigDecimal
  totalWeight_not: BigDecimal
  totalWeight_gt: BigDecimal
  totalWeight_lt: BigDecimal
  totalWeight_gte: BigDecimal
  totalWeight_lte: BigDecimal
  totalWeight_in: [BigDecimal!]
  totalWeight_not_in: [BigDecimal!]
  totalShares: BigDecimal
  totalShares_not: BigDecimal
  totalShares_gt: BigDecimal
  totalShares_lt: BigDecimal
  totalShares_gte: BigDecimal
  totalShares_lte: BigDecimal
  totalShares_in: [BigDecimal!]
  totalShares_not_in: [BigDecimal!]
  totalSwapVolume: BigDecimal
  totalSwapVolume_not: BigDecimal
  totalSwapVolume_gt: BigDecimal
  totalSwapVolume_lt: BigDecimal
  totalSwapVolume_gte: BigDecimal
  totalSwapVolume_lte: BigDecimal
  totalSwapVolume_in: [BigDecimal!]
  totalSwapVolume_not_in: [BigDecimal!]
  totalSwapFee: BigDecimal
  totalSwapFee_not: BigDecimal
  totalSwapFee_gt: BigDecimal
  totalSwapFee_lt: BigDecimal
  totalSwapFee_gte: BigDecimal
  totalSwapFee_lte: BigDecimal
  totalSwapFee_in: [BigDecimal!]
  totalSwapFee_not_in: [BigDecimal!]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  tokensList: [Bytes!]
  tokensList_not: [Bytes!]
  tokensList_contains: [Bytes!]
  tokensList_not_contains: [Bytes!]
  createTime: Int
  createTime_not: Int
  createTime_gt: Int
  createTime_lt: Int
  createTime_gte: Int
  createTime_lte: Int
  createTime_in: [Int!]
  createTime_not_in: [Int!]
  tokensCount: BigInt
  tokensCount_not: BigInt
  tokensCount_gt: BigInt
  tokensCount_lt: BigInt
  tokensCount_gte: BigInt
  tokensCount_lte: BigInt
  tokensCount_in: [BigInt!]
  tokensCount_not_in: [BigInt!]
  holdersCount: BigInt
  holdersCount_not: BigInt
  holdersCount_gt: BigInt
  holdersCount_lt: BigInt
  holdersCount_gte: BigInt
  holdersCount_lte: BigInt
  holdersCount_in: [BigInt!]
  holdersCount_not_in: [BigInt!]
  joinsCount: BigInt
  joinsCount_not: BigInt
  joinsCount_gt: BigInt
  joinsCount_lt: BigInt
  joinsCount_gte: BigInt
  joinsCount_lte: BigInt
  joinsCount_in: [BigInt!]
  joinsCount_not_in: [BigInt!]
  exitsCount: BigInt
  exitsCount_not: BigInt
  exitsCount_gt: BigInt
  exitsCount_lt: BigInt
  exitsCount_gte: BigInt
  exitsCount_lte: BigInt
  exitsCount_in: [BigInt!]
  exitsCount_not_in: [BigInt!]
  swapsCount: BigInt
  swapsCount_not: BigInt
  swapsCount_gt: BigInt
  swapsCount_lt: BigInt
  swapsCount_gte: BigInt
  swapsCount_lte: BigInt
  swapsCount_in: [BigInt!]
  swapsCount_not_in: [BigInt!]
  factoryID: String
  factoryID_not: String
  factoryID_gt: String
  factoryID_lt: String
  factoryID_gte: String
  factoryID_lte: String
  factoryID_in: [String!]
  factoryID_not_in: [String!]
  factoryID_contains: String
  factoryID_not_contains: String
  factoryID_starts_with: String
  factoryID_not_starts_with: String
  factoryID_ends_with: String
  factoryID_not_ends_with: String
  tx: Bytes
  tx_not: Bytes
  tx_in: [Bytes!]
  tx_not_in: [Bytes!]
  tx_contains: Bytes
  tx_not_contains: Bytes
}
scalar BigInt
scalar BigDecimal
type Pool {
  id: ID!
  controller: Bytes!
  publicSwap: Boolean!
  finalized: Boolean!
  crp: Boolean!
  crpController: Bytes
  symbol: String
  name: String
  rights: [String!]!
  cap: BigInt
  active: Boolean!
  swapFee: BigDecimal!
  totalWeight: BigDecimal!
  totalShares: BigDecimal!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  liquidity: BigDecimal!
  tokensList: [Bytes!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: PoolToken_orderBy, orderDirection: OrderDirection, where: PoolToken_filter): [PoolToken!]
  shares(skip: Int = 0, first: Int = 100, orderBy: PoolShare_orderBy, orderDirection: OrderDirection, where: PoolShare_filter): [PoolShare!]
  createTime: Int!
  tokensCount: BigInt!
  holdersCount: BigInt!
  joinsCount: BigInt!
  exitsCount: BigInt!
  swapsCount: BigInt!
  factoryID: Balancer!
  tx: Bytes
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]
}
enum PoolToken_orderBy {
  id
  poolId
  symbol
  name
  decimals
  address
  balance
  denormWeight
}
input PoolToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_not_contains: String
  poolId_starts_with: String
  poolId_not_starts_with: String
  poolId_ends_with: String
  poolId_not_ends_with: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  balance: BigDecimal
  balance_not: BigDecimal
  balance_gt: BigDecimal
  balance_lt: BigDecimal
  balance_gte: BigDecimal
  balance_lte: BigDecimal
  balance_in: [BigDecimal!]
  balance_not_in: [BigDecimal!]
  denormWeight: BigDecimal
  denormWeight_not: BigDecimal
  denormWeight_gt: BigDecimal
  denormWeight_lt: BigDecimal
  denormWeight_gte: BigDecimal
  denormWeight_lte: BigDecimal
  denormWeight_in: [BigDecimal!]
  denormWeight_not_in: [BigDecimal!]
}
type PoolToken {
  id: ID!
  poolId: Pool!
  symbol: String
  name: String
  decimals: Int!
  address: String!
  balance: BigDecimal!
  denormWeight: BigDecimal!
}
enum PoolShare_orderBy {
  id
  userAddress
  poolId
  balance
}
input PoolShare_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_not_contains: String
  userAddress_starts_with: String
  userAddress_not_starts_with: String
  userAddress_ends_with: String
  userAddress_not_ends_with: String
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_not_contains: String
  poolId_starts_with: String
  poolId_not_starts_with: String
  poolId_ends_with: String
  poolId_not_ends_with: String
  balance: BigDecimal
  balance_not: BigDecimal
  balance_gt: BigDecimal
  balance_lt: BigDecimal
  balance_gte: BigDecimal
  balance_lte: BigDecimal
  balance_in: [BigDecimal!]
  balance_not_in: [BigDecimal!]
}
type PoolShare {
  id: ID!
  userAddress: User!
  poolId: Pool!
  balance: BigDecimal!
}
type User {
  id: ID!
  sharesOwned(skip: Int = 0, first: Int = 100, orderBy: PoolShare_orderBy, orderDirection: OrderDirection, where: PoolShare_filter): [PoolShare!]
  txs(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]
}
enum Transaction_orderBy {
  id
  tx
  event
  block
  timestamp
  gasUsed
  gasPrice
  poolAddress
  userAddress
  action
  sender
}
input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tx: Bytes
  tx_not: Bytes
  tx_in: [Bytes!]
  tx_not_in: [Bytes!]
  tx_contains: Bytes
  tx_not_contains: Bytes
  event: String
  event_not: String
  event_gt: String
  event_lt: String
  event_gte: String
  event_lte: String
  event_in: [String!]
  event_not_in: [String!]
  event_contains: String
  event_not_contains: String
  event_starts_with: String
  event_not_starts_with: String
  event_ends_with: String
  event_not_ends_with: String
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  gasUsed: BigDecimal
  gasUsed_not: BigDecimal
  gasUsed_gt: BigDecimal
  gasUsed_lt: BigDecimal
  gasUsed_gte: BigDecimal
  gasUsed_lte: BigDecimal
  gasUsed_in: [BigDecimal!]
  gasUsed_not_in: [BigDecimal!]
  gasPrice: BigDecimal
  gasPrice_not: BigDecimal
  gasPrice_gt: BigDecimal
  gasPrice_lt: BigDecimal
  gasPrice_gte: BigDecimal
  gasPrice_lte: BigDecimal
  gasPrice_in: [BigDecimal!]
  gasPrice_not_in: [BigDecimal!]
  poolAddress: String
  poolAddress_not: String
  poolAddress_gt: String
  poolAddress_lt: String
  poolAddress_gte: String
  poolAddress_lte: String
  poolAddress_in: [String!]
  poolAddress_not_in: [String!]
  poolAddress_contains: String
  poolAddress_not_contains: String
  poolAddress_starts_with: String
  poolAddress_not_starts_with: String
  poolAddress_ends_with: String
  poolAddress_not_ends_with: String
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_not_contains: String
  userAddress_starts_with: String
  userAddress_not_starts_with: String
  userAddress_ends_with: String
  userAddress_not_ends_with: String
  action: SwapType
  action_not: SwapType
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
}
enum SwapType {
  swapExactAmountIn
  swapExactAmountOut
  joinswapExternAmountIn
  joinswapPoolAmountOut
  exitswapPoolAmountIn
  exitswapExternAmountOut
}
type Transaction {
  id: ID!
  tx: Bytes!
  event: String
  block: Int!
  timestamp: Int!
  gasUsed: BigDecimal!
  gasPrice: BigDecimal!
  poolAddress: Pool
  userAddress: User
  action: SwapType
  sender: Bytes
}
enum Swap_orderBy {
  id
  caller
  tokenIn
  tokenInSym
  tokenOut
  tokenOutSym
  tokenAmountIn
  tokenAmountOut
  poolAddress
  userAddress
  value
  feeValue
  poolTotalSwapVolume
  poolTotalSwapFee
  poolLiquidity
  timestamp
}
input Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  caller: Bytes
  caller_not: Bytes
  caller_in: [Bytes!]
  caller_not_in: [Bytes!]
  caller_contains: Bytes
  caller_not_contains: Bytes
  tokenIn: Bytes
  tokenIn_not: Bytes
  tokenIn_in: [Bytes!]
  tokenIn_not_in: [Bytes!]
  tokenIn_contains: Bytes
  tokenIn_not_contains: Bytes
  tokenInSym: String
  tokenInSym_not: String
  tokenInSym_gt: String
  tokenInSym_lt: String
  tokenInSym_gte: String
  tokenInSym_lte: String
  tokenInSym_in: [String!]
  tokenInSym_not_in: [String!]
  tokenInSym_contains: String
  tokenInSym_not_contains: String
  tokenInSym_starts_with: String
  tokenInSym_not_starts_with: String
  tokenInSym_ends_with: String
  tokenInSym_not_ends_with: String
  tokenOut: Bytes
  tokenOut_not: Bytes
  tokenOut_in: [Bytes!]
  tokenOut_not_in: [Bytes!]
  tokenOut_contains: Bytes
  tokenOut_not_contains: Bytes
  tokenOutSym: String
  tokenOutSym_not: String
  tokenOutSym_gt: String
  tokenOutSym_lt: String
  tokenOutSym_gte: String
  tokenOutSym_lte: String
  tokenOutSym_in: [String!]
  tokenOutSym_not_in: [String!]
  tokenOutSym_contains: String
  tokenOutSym_not_contains: String
  tokenOutSym_starts_with: String
  tokenOutSym_not_starts_with: String
  tokenOutSym_ends_with: String
  tokenOutSym_not_ends_with: String
  tokenAmountIn: BigDecimal
  tokenAmountIn_not: BigDecimal
  tokenAmountIn_gt: BigDecimal
  tokenAmountIn_lt: BigDecimal
  tokenAmountIn_gte: BigDecimal
  tokenAmountIn_lte: BigDecimal
  tokenAmountIn_in: [BigDecimal!]
  tokenAmountIn_not_in: [BigDecimal!]
  tokenAmountOut: BigDecimal
  tokenAmountOut_not: BigDecimal
  tokenAmountOut_gt: BigDecimal
  tokenAmountOut_lt: BigDecimal
  tokenAmountOut_gte: BigDecimal
  tokenAmountOut_lte: BigDecimal
  tokenAmountOut_in: [BigDecimal!]
  tokenAmountOut_not_in: [BigDecimal!]
  poolAddress: String
  poolAddress_not: String
  poolAddress_gt: String
  poolAddress_lt: String
  poolAddress_gte: String
  poolAddress_lte: String
  poolAddress_in: [String!]
  poolAddress_not_in: [String!]
  poolAddress_contains: String
  poolAddress_not_contains: String
  poolAddress_starts_with: String
  poolAddress_not_starts_with: String
  poolAddress_ends_with: String
  poolAddress_not_ends_with: String
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_not_contains: String
  userAddress_starts_with: String
  userAddress_not_starts_with: String
  userAddress_ends_with: String
  userAddress_not_ends_with: String
  value: BigDecimal
  value_not: BigDecimal
  value_gt: BigDecimal
  value_lt: BigDecimal
  value_gte: BigDecimal
  value_lte: BigDecimal
  value_in: [BigDecimal!]
  value_not_in: [BigDecimal!]
  feeValue: BigDecimal
  feeValue_not: BigDecimal
  feeValue_gt: BigDecimal
  feeValue_lt: BigDecimal
  feeValue_gte: BigDecimal
  feeValue_lte: BigDecimal
  feeValue_in: [BigDecimal!]
  feeValue_not_in: [BigDecimal!]
  poolTotalSwapVolume: BigDecimal
  poolTotalSwapVolume_not: BigDecimal
  poolTotalSwapVolume_gt: BigDecimal
  poolTotalSwapVolume_lt: BigDecimal
  poolTotalSwapVolume_gte: BigDecimal
  poolTotalSwapVolume_lte: BigDecimal
  poolTotalSwapVolume_in: [BigDecimal!]
  poolTotalSwapVolume_not_in: [BigDecimal!]
  poolTotalSwapFee: BigDecimal
  poolTotalSwapFee_not: BigDecimal
  poolTotalSwapFee_gt: BigDecimal
  poolTotalSwapFee_lt: BigDecimal
  poolTotalSwapFee_gte: BigDecimal
  poolTotalSwapFee_lte: BigDecimal
  poolTotalSwapFee_in: [BigDecimal!]
  poolTotalSwapFee_not_in: [BigDecimal!]
  poolLiquidity: BigDecimal
  poolLiquidity_not: BigDecimal
  poolLiquidity_gt: BigDecimal
  poolLiquidity_lt: BigDecimal
  poolLiquidity_gte: BigDecimal
  poolLiquidity_lte: BigDecimal
  poolLiquidity_in: [BigDecimal!]
  poolLiquidity_not_in: [BigDecimal!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
}
type Swap {
  id: ID!
  caller: Bytes!
  tokenIn: Bytes!
  tokenInSym: String!
  tokenOut: Bytes!
  tokenOutSym: String!
  tokenAmountIn: BigDecimal!
  tokenAmountOut: BigDecimal!
  poolAddress: Pool
  userAddress: User
  value: BigDecimal!
  feeValue: BigDecimal!
  poolTotalSwapVolume: BigDecimal!
  poolTotalSwapFee: BigDecimal!
  poolLiquidity: BigDecimal!
  timestamp: Int!
}
enum Balancer_orderBy {
  id
  color
  poolCount
  finalizedPoolCount
  crpCount
  pools
  txCount
  totalLiquidity
  totalSwapVolume
  totalSwapFee
}
input Balancer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  color: String
  color_not: String
  color_gt: String
  color_lt: String
  color_gte: String
  color_lte: String
  color_in: [String!]
  color_not_in: [String!]
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  poolCount: Int
  poolCount_not: Int
  poolCount_gt: Int
  poolCount_lt: Int
  poolCount_gte: Int
  poolCount_lte: Int
  poolCount_in: [Int!]
  poolCount_not_in: [Int!]
  finalizedPoolCount: Int
  finalizedPoolCount_not: Int
  finalizedPoolCount_gt: Int
  finalizedPoolCount_lt: Int
  finalizedPoolCount_gte: Int
  finalizedPoolCount_lte: Int
  finalizedPoolCount_in: [Int!]
  finalizedPoolCount_not_in: [Int!]
  crpCount: Int
  crpCount_not: Int
  crpCount_gt: Int
  crpCount_lt: Int
  crpCount_gte: Int
  crpCount_lte: Int
  crpCount_in: [Int!]
  crpCount_not_in: [Int!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  totalLiquidity: BigDecimal
  totalLiquidity_not: BigDecimal
  totalLiquidity_gt: BigDecimal
  totalLiquidity_lt: BigDecimal
  totalLiquidity_gte: BigDecimal
  totalLiquidity_lte: BigDecimal
  totalLiquidity_in: [BigDecimal!]
  totalLiquidity_not_in: [BigDecimal!]
  totalSwapVolume: BigDecimal
  totalSwapVolume_not: BigDecimal
  totalSwapVolume_gt: BigDecimal
  totalSwapVolume_lt: BigDecimal
  totalSwapVolume_gte: BigDecimal
  totalSwapVolume_lte: BigDecimal
  totalSwapVolume_in: [BigDecimal!]
  totalSwapVolume_not_in: [BigDecimal!]
  totalSwapFee: BigDecimal
  totalSwapFee_not: BigDecimal
  totalSwapFee_gt: BigDecimal
  totalSwapFee_lt: BigDecimal
  totalSwapFee_gte: BigDecimal
  totalSwapFee_lte: BigDecimal
  totalSwapFee_in: [BigDecimal!]
  totalSwapFee_not_in: [BigDecimal!]
}
enum User_orderBy {
  id
  sharesOwned
  txs
  swaps
}
input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
}
type TokenPrice {
  id: ID!
  symbol: String
  name: String
  decimals: Int!
  price: BigDecimal!
  poolLiquidity: BigDecimal!
  poolTokenId: String
}
enum TokenPrice_orderBy {
  id
  symbol
  name
  decimals
  price
  poolLiquidity
  poolTokenId
}
input TokenPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  poolLiquidity: BigDecimal
  poolLiquidity_not: BigDecimal
  poolLiquidity_gt: BigDecimal
  poolLiquidity_lt: BigDecimal
  poolLiquidity_gte: BigDecimal
  poolLiquidity_lte: BigDecimal
  poolLiquidity_in: [BigDecimal!]
  poolLiquidity_not_in: [BigDecimal!]
  poolTokenId: String
  poolTokenId_not: String
  poolTokenId_gt: String
  poolTokenId_lt: String
  poolTokenId_gte: String
  poolTokenId_lte: String
  poolTokenId_in: [String!]
  poolTokenId_not_in: [String!]
  poolTokenId_contains: String
  poolTokenId_not_contains: String
  poolTokenId_starts_with: String
  poolTokenId_not_starts_with: String
  poolTokenId_ends_with: String
  poolTokenId_not_ends_with: String
}
"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
}
type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
}
type Subscription {
  balancer(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Balancer
  balancers(
    skip: Int = 0
    first: Int = 100
    orderBy: Balancer_orderBy
    orderDirection: OrderDirection
    where: Balancer_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Balancer!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Pool!]!
  poolToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): PoolToken
  poolTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolToken_orderBy
    orderDirection: OrderDirection
    where: PoolToken_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [PoolToken!]!
  poolShare(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): PoolShare
  poolShares(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolShare_orderBy
    orderDirection: OrderDirection
    where: PoolShare_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [PoolShare!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [User!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Swap!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Transaction!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [TokenPrice!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}