query VolumeMetricsOfType(
    $period: TimeMetricPeriod!
    $type: TransactionType!
    $from: Int!
    $to: Int!
) @api(name: legacy) {
    volumeMetrics(
        orderBy: timestamp
        orderDirection: asc
        where: {
            period: $period
            type: $type
            timestamp_gte: $from
            timestamp_lte: $to
        }
    ) {
        timestamp
        value
    }
}

query VolumeMetrics($period: TimeMetricPeriod!, $from: Int!, $to: Int!)
@api(name: legacy) {
    volumeMetrics(
        orderBy: timestamp
        orderDirection: asc
        where: { period: $period, timestamp_gte: $from, timestamp_lte: $to }
    ) {
        type
        timestamp
        value
    }
}

query AggregateMetricsOfType(
    $period: TimeMetricPeriod!
    $type: AggregateMetricType!
    $from: Int!
    $to: Int!
) @api(name: legacy) {
    aggregateMetrics(
        orderBy: timestamp
        orderDirection: asc
        where: {
            period: $period
            type: $type
            timestamp_gte: $from
            timestamp_lte: $to
        }
    ) {
        timestamp
        value
    }
}

query AggregateMetrics($period: TimeMetricPeriod!, $from: Int!, $to: Int!)
@api(name: legacy) {
    aggregateMetrics(
        orderBy: timestamp
        orderDirection: asc
        where: { period: $period, timestamp_gte: $from, timestamp_lte: $to }
    ) {
        type
        timestamp
        value
    }
}

query MerkleDropClaims($account: Bytes!) @api(name: legacy) {
    merkleDrops {
        id
        token {
            id
            address
            decimals
            symbol
            totalSupply
        }
        tranches(
            orderDirection: asc
            orderBy: trancheNumber
            where: { expired: false }
        ) {
            trancheNumber
            totalAmount
            claims(where: { account: $account }) {
                balance
            }
        }
    }
}

query ScriptRewards(
    $id: ID!
    $end: Int!
    $block: Block_height
    $limit: Int!
    $offset: Int!
) @api(name: legacy) {
    stakingRewardsContracts(where: { id: $id }, block: $block) {
        address: id
        lastUpdateTime
        periodFinish
        rewardPerTokenStored
        rewardRate
        totalSupply

        stakingRewards(where: { type: REWARD }, first: $limit, skip: $offset) {
            amount
            account
            amountPerTokenPaid
        }

        stakingBalances(first: $limit, skip: $offset) {
            amount
            account
        }

        claimRewardTransactions(
            first: $limit
            skip: $offset
            orderBy: timestamp
            orderDirection: asc
            where: { timestamp_lt: $end }
        ) {
            amount
            sender
        }
    }
}