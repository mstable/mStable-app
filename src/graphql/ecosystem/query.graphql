# import './fragments.graphql'

fragment StakingRewardsContractDetails on StakingRewardsContract {
    address: id
    id
    type
    duration
    lastUpdateTime
    periodFinish
    rewardRate
    rewardPerTokenStored
    platformRewardPerTokenStored
    platformRewardRate
    totalSupply
    totalStakingRewards
    totalPlatformRewards
    stakingToken {
        totalSupply {
            exact
            decimals
            simple
        }
        ...TokenDetails
    }
    rewardsToken {
        ...TokenDetails
    }
    platformToken {
        ...TokenDetails
    }
}

query AllErc20Tokens @api(name: ecosystem) {
    tokens {
        ...TokenDetails
    }
}

query StakingRewardsContract($id: ID!, $account: Bytes) @api(name: ecosystem) {
    stakingRewardsContract(id: $id) {
        ...StakingRewardsContractDetails
        stakingBalances(where: { account: $account }) {
            amount
        }
        stakingRewards: stakingRewards(where: { account: $account, type: REWARD }) {
            amount
            amountPerTokenPaid
        }
    }
}

query StakingRewardsContracts(
    $account: Bytes
    $includeHistoric: Boolean!
    $block: Block_height
) @api(name: ecosystem) {
    current: stakingRewardsContracts {
        ...StakingRewardsContractDetails
        stakingBalances(where: { account: $account }) {
            amount
        }
        stakingRewards: stakingRewards(where: { account: $account, type: REWARD }) {
            amount
            amountPerTokenPaid
        }
        platformRewards: stakingRewards(
            where: { account: $account, type: PLATFORM_REWARD }
        ) {
            amount
            amountPerTokenPaid
        }
    }
    historic: stakingRewardsContracts(block: $block)
    @include(if: $includeHistoric) {
        address: id
        id
        lastUpdateTime
        rewardPerTokenStored
        platformRewardPerTokenStored
    }
}

query RewardsDistributor @api(name: ecosystem) {
    rewardsDistributors(first: 1) {
        id
        fundManagers
    }
}
