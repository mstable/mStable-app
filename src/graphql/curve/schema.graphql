schema {
  query: Query
  subscription: Subscription
}
type Query {
  systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): SystemInfo
  systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: SystemInfo_orderBy
    orderDirection: OrderDirection
    where: SystemInfo_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [SystemInfo!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Pool!]!
  feeChangeChangelog(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): FeeChangeChangelog
  feeChangeChangelogs(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeChangeChangelog_orderBy
    orderDirection: OrderDirection
    where: FeeChangeChangelog_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [FeeChangeChangelog!]!
  adminFeeChangelog(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): AdminFeeChangelog
  adminFeeChangelogs(
    skip: Int = 0
    first: Int = 100
    orderBy: AdminFeeChangelog_orderBy
    orderDirection: OrderDirection
    where: AdminFeeChangelog_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [AdminFeeChangelog!]!
  amplificationCoeffChangelog(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): AmplificationCoeffChangelog
  amplificationCoeffChangelogs(
    skip: Int = 0
    first: Int = 100
    orderBy: AmplificationCoeffChangelog_orderBy
    orderDirection: OrderDirection
    where: AmplificationCoeffChangelog_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [AmplificationCoeffChangelog!]!
  addLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): AddLiquidityEvent
  addLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: AddLiquidityEvent_orderBy
    orderDirection: OrderDirection
    where: AddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [AddLiquidityEvent!]!
  removeLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): RemoveLiquidityEvent
  removeLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RemoveLiquidityEvent_orderBy
    orderDirection: OrderDirection
    where: RemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [RemoveLiquidityEvent!]!
  exchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Exchange
  exchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: Exchange_orderBy
    orderDirection: OrderDirection
    where: Exchange_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Exchange!]!
  transferOwnershipEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): TransferOwnershipEvent
  transferOwnershipEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferOwnershipEvent_orderBy
    orderDirection: OrderDirection
    where: TransferOwnershipEvent_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [TransferOwnershipEvent!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Token!]!
  poolEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): PoolEvent
  poolEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolEvent_orderBy
    orderDirection: OrderDirection
    where: PoolEvent_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [PoolEvent!]!
}
input Block_height {
  hash: Bytes
  number: Int
}
scalar Bytes
type SystemInfo {
  id: ID!
  registryOwner: Bytes
  exchangeCount: BigInt!
  poolCount: BigInt!
  tokenCount: BigInt!
  updated: BigInt!
  updatedAtBlock: BigInt!
  updatedAtTransaction: Bytes!
}
scalar BigInt
enum SystemInfo_orderBy {
  id
  registryOwner
  exchangeCount
  poolCount
  tokenCount
  updated
  updatedAtBlock
  updatedAtTransaction
}
enum OrderDirection {
  asc
  desc
}
input SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registryOwner: Bytes
  registryOwner_not: Bytes
  registryOwner_in: [Bytes!]
  registryOwner_not_in: [Bytes!]
  registryOwner_contains: Bytes
  registryOwner_not_contains: Bytes
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  updated: BigInt
  updated_not: BigInt
  updated_gt: BigInt
  updated_lt: BigInt
  updated_gte: BigInt
  updated_lte: BigInt
  updated_in: [BigInt!]
  updated_not_in: [BigInt!]
  updatedAtBlock: BigInt
  updatedAtBlock_not: BigInt
  updatedAtBlock_gt: BigInt
  updatedAtBlock_lt: BigInt
  updatedAtBlock_gte: BigInt
  updatedAtBlock_lte: BigInt
  updatedAtBlock_in: [BigInt!]
  updatedAtBlock_not_in: [BigInt!]
  updatedAtTransaction: Bytes
  updatedAtTransaction_not: Bytes
  updatedAtTransaction_in: [Bytes!]
  updatedAtTransaction_not_in: [Bytes!]
  updatedAtTransaction_contains: Bytes
  updatedAtTransaction_not_contains: Bytes
}
type Pool {
  id: ID!
  """ Swap contract address """
  address: Bytes!
  """ Number of coins composing the pool """
  coinCount: Int!
  """ Wrapped coins involved in the pool """
  coins(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  """ Plain coins (ERC20) """
  underlyingCoins(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  balances: [BigInt!]!
  """ Address of the token representing LP share """
  poolToken: Token
  """ Amplification coefficient multiplied by n * (n - 1) """
  A: BigInt!
  """ Fee to charge for exchanges """
  fee: BigDecimal!
  adminFee: BigDecimal!
  """ Average dollar value of pool token """
  virtualPrice: BigDecimal!
  rateMethodId: Bytes
  """ Admins address """
  owner: Bytes!
  addedAt: BigInt!
  addedAtBlock: BigInt!
  addedAtTransaction: Bytes!
  removedAt: BigInt
  removedAtBlock: BigInt
  removedAtTransaction: Bytes
  events(skip: Int = 0, first: Int = 100, orderBy: PoolEvent_orderBy, orderDirection: OrderDirection, where: PoolEvent_filter): [PoolEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: Exchange_orderBy, orderDirection: OrderDirection, where: Exchange_filter): [Exchange!]
}
enum Token_orderBy {
  id
  address
  decimals
  name
  symbol
}
input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
}
type Token {
  id: ID!
  address: Bytes!
  decimals: BigInt!
  name: String
  symbol: String
}
scalar BigDecimal
enum PoolEvent_orderBy {
  pool
  block
  timestamp
  transaction
}
input PoolEvent_filter {
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_not_contains: String
  pool_starts_with: String
  pool_not_starts_with: String
  pool_ends_with: String
  pool_not_ends_with: String
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
}
interface PoolEvent {
  pool: Pool!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}
enum Exchange_orderBy {
  id
  pool
  buyer
  soldId
  tokensSold
  boughtId
  tokensBought
  block
  timestamp
  transaction
}
input Exchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_not_contains: String
  pool_starts_with: String
  pool_not_starts_with: String
  pool_ends_with: String
  pool_not_ends_with: String
  buyer: Bytes
  buyer_not: Bytes
  buyer_in: [Bytes!]
  buyer_not_in: [Bytes!]
  buyer_contains: Bytes
  buyer_not_contains: Bytes
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
}
type Exchange implements PoolEvent {
  id: ID!
  pool: Pool!
  buyer: Bytes!
  soldId: BigInt!
  tokensSold: BigInt!
  boughtId: BigInt!
  tokensBought: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}
enum Pool_orderBy {
  id
  address
  coinCount
  coins
  underlyingCoins
  balances
  poolToken
  A
  fee
  adminFee
  virtualPrice
  rateMethodId
  owner
  addedAt
  addedAtBlock
  addedAtTransaction
  removedAt
  removedAtBlock
  removedAtTransaction
  events
  exchanges
}
input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  coinCount: Int
  coinCount_not: Int
  coinCount_gt: Int
  coinCount_lt: Int
  coinCount_gte: Int
  coinCount_lte: Int
  coinCount_in: [Int!]
  coinCount_not_in: [Int!]
  coins: [String!]
  coins_not: [String!]
  coins_contains: [String!]
  coins_not_contains: [String!]
  underlyingCoins: [String!]
  underlyingCoins_not: [String!]
  underlyingCoins_contains: [String!]
  underlyingCoins_not_contains: [String!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_not_contains: [BigInt!]
  poolToken: String
  poolToken_not: String
  poolToken_gt: String
  poolToken_lt: String
  poolToken_gte: String
  poolToken_lte: String
  poolToken_in: [String!]
  poolToken_not_in: [String!]
  poolToken_contains: String
  poolToken_not_contains: String
  poolToken_starts_with: String
  poolToken_not_starts_with: String
  poolToken_ends_with: String
  poolToken_not_ends_with: String
  A: BigInt
  A_not: BigInt
  A_gt: BigInt
  A_lt: BigInt
  A_gte: BigInt
  A_lte: BigInt
  A_in: [BigInt!]
  A_not_in: [BigInt!]
  fee: BigDecimal
  fee_not: BigDecimal
  fee_gt: BigDecimal
  fee_lt: BigDecimal
  fee_gte: BigDecimal
  fee_lte: BigDecimal
  fee_in: [BigDecimal!]
  fee_not_in: [BigDecimal!]
  adminFee: BigDecimal
  adminFee_not: BigDecimal
  adminFee_gt: BigDecimal
  adminFee_lt: BigDecimal
  adminFee_gte: BigDecimal
  adminFee_lte: BigDecimal
  adminFee_in: [BigDecimal!]
  adminFee_not_in: [BigDecimal!]
  virtualPrice: BigDecimal
  virtualPrice_not: BigDecimal
  virtualPrice_gt: BigDecimal
  virtualPrice_lt: BigDecimal
  virtualPrice_gte: BigDecimal
  virtualPrice_lte: BigDecimal
  virtualPrice_in: [BigDecimal!]
  virtualPrice_not_in: [BigDecimal!]
  rateMethodId: Bytes
  rateMethodId_not: Bytes
  rateMethodId_in: [Bytes!]
  rateMethodId_not_in: [Bytes!]
  rateMethodId_contains: Bytes
  rateMethodId_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  addedAt: BigInt
  addedAt_not: BigInt
  addedAt_gt: BigInt
  addedAt_lt: BigInt
  addedAt_gte: BigInt
  addedAt_lte: BigInt
  addedAt_in: [BigInt!]
  addedAt_not_in: [BigInt!]
  addedAtBlock: BigInt
  addedAtBlock_not: BigInt
  addedAtBlock_gt: BigInt
  addedAtBlock_lt: BigInt
  addedAtBlock_gte: BigInt
  addedAtBlock_lte: BigInt
  addedAtBlock_in: [BigInt!]
  addedAtBlock_not_in: [BigInt!]
  addedAtTransaction: Bytes
  addedAtTransaction_not: Bytes
  addedAtTransaction_in: [Bytes!]
  addedAtTransaction_not_in: [Bytes!]
  addedAtTransaction_contains: Bytes
  addedAtTransaction_not_contains: Bytes
  removedAt: BigInt
  removedAt_not: BigInt
  removedAt_gt: BigInt
  removedAt_lt: BigInt
  removedAt_gte: BigInt
  removedAt_lte: BigInt
  removedAt_in: [BigInt!]
  removedAt_not_in: [BigInt!]
  removedAtBlock: BigInt
  removedAtBlock_not: BigInt
  removedAtBlock_gt: BigInt
  removedAtBlock_lt: BigInt
  removedAtBlock_gte: BigInt
  removedAtBlock_lte: BigInt
  removedAtBlock_in: [BigInt!]
  removedAtBlock_not_in: [BigInt!]
  removedAtTransaction: Bytes
  removedAtTransaction_not: Bytes
  removedAtTransaction_in: [Bytes!]
  removedAtTransaction_not_in: [Bytes!]
  removedAtTransaction_contains: Bytes
  removedAtTransaction_not_contains: Bytes
}
type FeeChangeChangelog implements PoolEvent {
  id: ID!
  pool: Pool!
  value: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}
enum FeeChangeChangelog_orderBy {
  id
  pool
  value
  block
  timestamp
  transaction
}
input FeeChangeChangelog_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_not_contains: String
  pool_starts_with: String
  pool_not_starts_with: String
  pool_ends_with: String
  pool_not_ends_with: String
  value: BigDecimal
  value_not: BigDecimal
  value_gt: BigDecimal
  value_lt: BigDecimal
  value_gte: BigDecimal
  value_lte: BigDecimal
  value_in: [BigDecimal!]
  value_not_in: [BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
}
type AdminFeeChangelog implements PoolEvent {
  id: ID!
  pool: Pool!
  value: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}
enum AdminFeeChangelog_orderBy {
  id
  pool
  value
  block
  timestamp
  transaction
}
input AdminFeeChangelog_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_not_contains: String
  pool_starts_with: String
  pool_not_starts_with: String
  pool_ends_with: String
  pool_not_ends_with: String
  value: BigDecimal
  value_not: BigDecimal
  value_gt: BigDecimal
  value_lt: BigDecimal
  value_gte: BigDecimal
  value_lte: BigDecimal
  value_in: [BigDecimal!]
  value_not_in: [BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
}
type AmplificationCoeffChangelog implements PoolEvent {
  id: ID!
  pool: Pool!
  value: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}
enum AmplificationCoeffChangelog_orderBy {
  id
  pool
  value
  block
  timestamp
  transaction
}
input AmplificationCoeffChangelog_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_not_contains: String
  pool_starts_with: String
  pool_not_starts_with: String
  pool_ends_with: String
  pool_not_ends_with: String
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
}
type AddLiquidityEvent implements PoolEvent {
  id: ID!
  pool: Pool!
  provider: Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt!
  tokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}
enum AddLiquidityEvent_orderBy {
  id
  pool
  provider
  tokenAmounts
  fees
  invariant
  tokenSupply
  block
  timestamp
  transaction
}
input AddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_not_contains: String
  pool_starts_with: String
  pool_not_starts_with: String
  pool_ends_with: String
  pool_not_ends_with: String
  provider: Bytes
  provider_not: Bytes
  provider_in: [Bytes!]
  provider_not_in: [Bytes!]
  provider_contains: Bytes
  provider_not_contains: Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_not_contains: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  tokenSupply: BigInt
  tokenSupply_not: BigInt
  tokenSupply_gt: BigInt
  tokenSupply_lt: BigInt
  tokenSupply_gte: BigInt
  tokenSupply_lte: BigInt
  tokenSupply_in: [BigInt!]
  tokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
}
type RemoveLiquidityEvent implements PoolEvent {
  id: ID!
  pool: Pool!
  provider: Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  tokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}
enum RemoveLiquidityEvent_orderBy {
  id
  pool
  provider
  tokenAmounts
  fees
  invariant
  tokenSupply
  block
  timestamp
  transaction
}
input RemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_not_contains: String
  pool_starts_with: String
  pool_not_starts_with: String
  pool_ends_with: String
  pool_not_ends_with: String
  provider: Bytes
  provider_not: Bytes
  provider_in: [Bytes!]
  provider_not_in: [Bytes!]
  provider_contains: Bytes
  provider_not_contains: Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_not_contains: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  tokenSupply: BigInt
  tokenSupply_not: BigInt
  tokenSupply_gt: BigInt
  tokenSupply_lt: BigInt
  tokenSupply_gte: BigInt
  tokenSupply_lte: BigInt
  tokenSupply_in: [BigInt!]
  tokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
}
type TransferOwnershipEvent implements PoolEvent {
  id: ID!
  pool: Pool!
  newAdmin: Bytes!
  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}
enum TransferOwnershipEvent_orderBy {
  id
  pool
  newAdmin
  block
  timestamp
  transaction
}
input TransferOwnershipEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_not_contains: String
  pool_starts_with: String
  pool_not_starts_with: String
  pool_ends_with: String
  pool_not_ends_with: String
  newAdmin: Bytes
  newAdmin_not: Bytes
  newAdmin_in: [Bytes!]
  newAdmin_not_in: [Bytes!]
  newAdmin_contains: Bytes
  newAdmin_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
}
type Subscription {
  systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): SystemInfo
  systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: SystemInfo_orderBy
    orderDirection: OrderDirection
    where: SystemInfo_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [SystemInfo!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Pool!]!
  feeChangeChangelog(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): FeeChangeChangelog
  feeChangeChangelogs(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeChangeChangelog_orderBy
    orderDirection: OrderDirection
    where: FeeChangeChangelog_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [FeeChangeChangelog!]!
  adminFeeChangelog(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): AdminFeeChangelog
  adminFeeChangelogs(
    skip: Int = 0
    first: Int = 100
    orderBy: AdminFeeChangelog_orderBy
    orderDirection: OrderDirection
    where: AdminFeeChangelog_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [AdminFeeChangelog!]!
  amplificationCoeffChangelog(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): AmplificationCoeffChangelog
  amplificationCoeffChangelogs(
    skip: Int = 0
    first: Int = 100
    orderBy: AmplificationCoeffChangelog_orderBy
    orderDirection: OrderDirection
    where: AmplificationCoeffChangelog_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [AmplificationCoeffChangelog!]!
  addLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): AddLiquidityEvent
  addLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: AddLiquidityEvent_orderBy
    orderDirection: OrderDirection
    where: AddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [AddLiquidityEvent!]!
  removeLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): RemoveLiquidityEvent
  removeLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RemoveLiquidityEvent_orderBy
    orderDirection: OrderDirection
    where: RemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [RemoveLiquidityEvent!]!
  exchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Exchange
  exchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: Exchange_orderBy
    orderDirection: OrderDirection
    where: Exchange_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Exchange!]!
  transferOwnershipEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): TransferOwnershipEvent
  transferOwnershipEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferOwnershipEvent_orderBy
    orderDirection: OrderDirection
    where: TransferOwnershipEvent_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [TransferOwnershipEvent!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [Token!]!
  poolEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): PoolEvent
  poolEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolEvent_orderBy
    orderDirection: OrderDirection
    where: PoolEvent_filter
    """
    The block at which the query should be executed. Can either be an `{ number:
    Int }` containing the block number or a `{ hash: Bytes }` value containing a
    block hash. Defaults to the latest block when omitted.
    """
    block: Block_height
  ): [PoolEvent!]!
}